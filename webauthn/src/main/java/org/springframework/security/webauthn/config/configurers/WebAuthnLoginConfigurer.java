/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.security.webauthn.config.configurers;

import com.webauthn4j.converter.util.JsonConverter;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.MFATokenEvaluator;
import org.springframework.security.config.annotation.web.HttpSecurityBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer;
import org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer;
import org.springframework.security.web.authentication.ForwardAuthenticationFailureHandler;
import org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.security.webauthn.WebAuthnProcessingFilter;
import org.springframework.security.webauthn.WebAuthnRegistrationRequestValidator;
import org.springframework.security.webauthn.challenge.WebAuthnChallengeRepository;
import org.springframework.security.webauthn.server.WebAuthnServerPropertyProvider;
import org.springframework.util.Assert;


/**
 * Adds WebAuthn authentication. All attributes have reasonable defaults making all
 * parameters are optional. If no {@link #loginPage(String)} is specified, a default login
 * page will be generated by the framework.
 *
 * <h2>Security Filters</h2>
 * <p>
 * The following Filters are populated
 *
 * <ul>
 * <li>{@link WebAuthnProcessingFilter}</li>
 * </ul>
 *
 * <h2>Shared Objects Created</h2>
 * <p>
 * The following shared objects are populated
 * <ul>
 * <li>{@link WebAuthnChallengeRepository}</li>
 * <li>{@link WebAuthnServerPropertyProvider}</li>
 * </ul>
 *
 * <h2>Shared Objects Used</h2>
 * <p>
 * The following shared objects are used:
 *
 * <ul>
 * <li>{@link AuthenticationManager}</li>
 * <li>{@link MFATokenEvaluator}</li>
 * </ul>
 *
 * @see WebAuthnAuthenticationProviderConfigurer
 */
public final class WebAuthnLoginConfigurer<H extends HttpSecurityBuilder<H>> extends
		AbstractAuthenticationFilterConfigurer<H, WebAuthnLoginConfigurer<H>, WebAuthnProcessingFilter> {

	//~ Instance fields
	// ================================================================================================
	private JsonConverter jsonConverter = null;
	private WebAuthnServerPropertyProvider webAuthnServerPropertyProvider = null;
	private WebAuthnRegistrationRequestValidator webAuthnRegistrationRequestValidator;
	private String usernameParameter = null;
	private String passwordParameter = null;
	private String credentialIdParameter = null;
	private String clientDataJSONParameter = null;
	private String authenticatorDataParameter = null;
	private String signatureParameter = null;
	private String clientExtensionsJSONParameter = null;


	public WebAuthnLoginConfigurer() {
		super(new WebAuthnProcessingFilter(), null);
	}

	public static WebAuthnLoginConfigurer<HttpSecurity> webAuthnLogin() {
		return new WebAuthnLoginConfigurer<>();
	}

	// ~ Methods
	// ========================================================================================================
	@Override
	public void init(H http) throws Exception {
		super.init(http);

		if (jsonConverter == null) {
			jsonConverter = WebAuthnConfigurerUtil.getOrCreateJsonConverter(http);
		}
		http.setSharedObject(JsonConverter.class, jsonConverter);

		if (webAuthnServerPropertyProvider == null) {
			webAuthnServerPropertyProvider = WebAuthnConfigurerUtil.getOrCreateServerPropertyProvider(http);
		}
		http.setSharedObject(WebAuthnServerPropertyProvider.class, webAuthnServerPropertyProvider);

		if (webAuthnRegistrationRequestValidator == null) {
			webAuthnRegistrationRequestValidator = WebAuthnConfigurerUtil.getOrCreateWebAuthnRegistrationRequestValidator(http);
		}
		http.setSharedObject(WebAuthnRegistrationRequestValidator.class, webAuthnRegistrationRequestValidator);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void configure(H http) throws Exception {
		super.configure(http);
		configureParameters();

		this.getAuthenticationFilter().setServerPropertyProvider(webAuthnServerPropertyProvider);

	}

	private void configureParameters() {
		if (usernameParameter != null) {
			this.getAuthenticationFilter().setUsernameParameter(usernameParameter);
		}
		if (passwordParameter != null) {
			this.getAuthenticationFilter().setPasswordParameter(passwordParameter);
		}
		if (credentialIdParameter != null) {
			this.getAuthenticationFilter().setCredentialIdParameter(credentialIdParameter);
		}
		if (clientDataJSONParameter != null) {
			this.getAuthenticationFilter().setClientDataJSONParameter(clientDataJSONParameter);
		}
		if (authenticatorDataParameter != null) {
			this.getAuthenticationFilter().setAuthenticatorDataParameter(authenticatorDataParameter);
		}
		if (signatureParameter != null) {
			this.getAuthenticationFilter().setSignatureParameter(signatureParameter);
		}
		if (clientExtensionsJSONParameter != null) {
			this.getAuthenticationFilter().setClientExtensionsJSONParameter(clientExtensionsJSONParameter);
		}
	}

	/**
	 * Specifies the {@link JsonConverter} to be used.
	 *
	 * @param jsonConverter the {@link JsonConverter}
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> jsonConverter(JsonConverter jsonConverter) {
		Assert.notNull(jsonConverter, "jsonConverter must not be null");
		this.jsonConverter = jsonConverter;
		return this;
	}

	/**
	 * Specifies the {@link WebAuthnServerPropertyProvider} to be used.
	 *
	 * @param webAuthnServerPropertyProvider the {@link WebAuthnServerPropertyProvider}
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> serverPropertyProvider(WebAuthnServerPropertyProvider webAuthnServerPropertyProvider) {
		Assert.notNull(webAuthnServerPropertyProvider, "webAuthnServerPropertyProvider must not be null");
		this.webAuthnServerPropertyProvider = webAuthnServerPropertyProvider;
		return this;
	}

	/**
	 * The HTTP parameter to look for the username when performing authentication. Default
	 * is "username".
	 *
	 * @param usernameParameter the HTTP parameter to look for the username when
	 *                          performing authentication
	 * @return the {@link FormLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> usernameParameter(String usernameParameter) {
		Assert.hasText(usernameParameter, "usernameParameter must not be null or empty");
		this.usernameParameter = usernameParameter;
		return this;
	}

	/**
	 * The HTTP parameter to look for the password when performing authentication. Default
	 * is "password".
	 *
	 * @param passwordParameter the HTTP parameter to look for the password when
	 *                          performing authentication
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> passwordParameter(String passwordParameter) {
		Assert.hasText(passwordParameter, "passwordParameter must not be null or empty");
		this.passwordParameter = passwordParameter;
		return this;
	}

	/**
	 * The HTTP parameter to look for the credentialId when performing authentication. Default
	 * is "credentialId".
	 *
	 * @param credentialIdParameter the HTTP parameter to look for the credentialId when
	 *                              performing authentication
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> credentialIdParameter(String credentialIdParameter) {
		Assert.hasText(credentialIdParameter, "credentialIdParameter must not be null or empty");
		this.credentialIdParameter = credentialIdParameter;
		return this;
	}

	/**
	 * The HTTP parameter to look for the clientData when performing authentication. Default
	 * is "clientDataJSON".
	 *
	 * @param clientDataJSONParameter the HTTP parameter to look for the clientDataJSON when
	 *                                performing authentication
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> clientDataJSONParameter(String clientDataJSONParameter) {
		Assert.hasText(clientDataJSONParameter, "clientDataJSONParameter must not be null or empty");
		this.clientDataJSONParameter = clientDataJSONParameter;
		return this;
	}

	/**
	 * The HTTP parameter to look for the authenticatorData when performing authentication. Default
	 * is "authenticatorData".
	 *
	 * @param authenticatorDataParameter the HTTP parameter to look for the authenticatorData when
	 *                                   performing authentication
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> authenticatorDataParameter(String authenticatorDataParameter) {
		Assert.hasText(authenticatorDataParameter, "authenticatorDataParameter must not be null or empty");
		this.authenticatorDataParameter = authenticatorDataParameter;
		return this;
	}

	/**
	 * The HTTP parameter to look for the signature when performing authentication. Default
	 * is "signature".
	 *
	 * @param signatureParameter the HTTP parameter to look for the signature when
	 *                           performing authentication
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> signatureParameter(String signatureParameter) {
		Assert.hasText(signatureParameter, "signatureParameter must not be null or empty");
		this.signatureParameter = signatureParameter;
		return this;
	}

	/**
	 * The HTTP parameter to look for the clientExtensionsJSON when performing authentication. Default
	 * is "clientExtensionsJSON".
	 *
	 * @param clientExtensionsJSONParameter the HTTP parameter to look for the clientExtensionsJSON when
	 *                                      performing authentication
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> clientExtensionsJSONParameter(String clientExtensionsJSONParameter) {
		Assert.hasText(clientExtensionsJSONParameter, "clientExtensionsJSONParameter must not be null or empty");
		this.clientExtensionsJSONParameter = clientExtensionsJSONParameter;
		return this;
	}

	/**
	 * Forward Authentication Success Handler
	 *
	 * @param forwardUrl the target URL in case of success
	 * @return he {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> successForwardUrl(String forwardUrl) {
		successHandler(new ForwardAuthenticationSuccessHandler(forwardUrl));
		return this;
	}

	/**
	 * Forward Authentication Failure Handler
	 *
	 * @param forwardUrl the target URL in case of failure
	 * @return he {@link WebAuthnLoginConfigurer} for additional customization
	 */
	public WebAuthnLoginConfigurer<H> failureForwardUrl(String forwardUrl) {
		failureHandler(new ForwardAuthenticationFailureHandler(forwardUrl));
		return this;
	}

	/**
	 * <p>
	 * Specifies the URL to send users to if login is required. If used with
	 * {@link WebSecurityConfigurerAdapter} a default login page will be generated when
	 * this attribute is not specified.
	 * </p>
	 *
	 * @param loginPage login page
	 * @return the {@link WebAuthnLoginConfigurer} for additional customization
	 */
	@Override
	public WebAuthnLoginConfigurer<H> loginPage(String loginPage) {
		return super.loginPage(loginPage);
	}

	/**
	 * Create the {@link RequestMatcher} given a loginProcessingUrl
	 *
	 * @param loginProcessingUrl creates the {@link RequestMatcher} based upon the
	 *                           loginProcessingUrl
	 * @return the {@link RequestMatcher} to use based upon the loginProcessingUrl
	 */
	@Override
	protected RequestMatcher createLoginProcessingUrlMatcher(String loginProcessingUrl) {
		return new AntPathRequestMatcher(loginProcessingUrl, "POST");
	}


}
